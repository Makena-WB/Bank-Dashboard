{"version":3,"file":"queuing.js","sourceRoot":"","sources":["../src/queuing.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAoC,MAAM,qBAAqB,CAAC;AAsBnF;IAGE;QAFO,mBAAc,GAAoB,EAAE,CAAC;QAG1C,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IAEM,yCAAc,GAArB,UAAsB,OAAsB;QAA5C,iBAmBC;QAlBC,IAAM,WAAW,gBAAQ,OAAO,CAAE,CAAC;QAEnC,WAAW,CAAC,UAAU;YACpB,WAAW,CAAC,UAAU;gBACtB,IAAI,UAAU,CAAc,UAAA,QAAQ;oBAClC,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAEtC,IAAI,OAAO,WAAW,CAAC,UAAU,KAAK,WAAW,EAAE;wBACjD,WAAW,CAAC,UAAU,GAAG,EAAE,CAAC;qBAC7B;oBAED,WAAW,CAAC,UAAU,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC/E,WAAW,CAAC,UAAU,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAClF,WAAW,CAAC,UAAU,CAAC,QAAQ;wBAC7B,WAAW,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7D,CAAC,CAAC,CAAC;QAEL,OAAO,WAAW,CAAC,UAAU,CAAC;IAChC,CAAC;IAEM,uCAAY,GAAnB,UAAoB,GAAW;QAC7B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO;YACjC,IAAI,GAAG;gBAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;gBAClC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IACH,uBAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["import { Observable, Operation, NextLink, FetchResult } from '@apollo/client/core';\n\nexport interface SubscriberInterface {\n  next?: (result: FetchResult) => void;\n  error?: (error: Error) => void;\n  complete?: () => void;\n}\n\nexport interface QueuedRequest {\n  operation: Operation;\n  forward?: NextLink;\n  subscriber?: SubscriberInterface;\n\n  // promise is created when the query fetch request is\n  // added to the queue and is resolved once the result is back\n  // from the server.\n  observable?: Observable<FetchResult>;\n  next?: (result: FetchResult) => void;\n  error?: (error: Error) => void;\n  complete?: () => void;\n}\n\nexport class OperationQueuing {\n  public queuedRequests: QueuedRequest[] = [];\n\n  constructor() {\n    this.queuedRequests = [];\n  }\n\n  public enqueueRequest(request: QueuedRequest): Observable<FetchResult> {\n    const requestCopy = { ...request };\n\n    requestCopy.observable =\n      requestCopy.observable ||\n      new Observable<FetchResult>(observer => {\n        this.queuedRequests.push(requestCopy);\n\n        if (typeof requestCopy.subscriber === 'undefined') {\n          requestCopy.subscriber = {};\n        }\n\n        requestCopy.subscriber.next = requestCopy.next || observer.next.bind(observer);\n        requestCopy.subscriber.error = requestCopy.error || observer.error.bind(observer);\n        requestCopy.subscriber.complete =\n          requestCopy.complete || observer.complete.bind(observer);\n      });\n\n    return requestCopy.observable;\n  }\n\n  public consumeQueue(err?: Error): void {\n    this.queuedRequests.forEach(request => {\n      if (err) request.subscriber.error(err);\n      else request.forward(request.operation).subscribe(request.subscriber);\n    });\n\n    this.queuedRequests = [];\n  }\n}\n"]}